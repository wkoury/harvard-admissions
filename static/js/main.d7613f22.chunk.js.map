{"version":3,"sources":["assets/Data.js","components/Probability.js","components/Form.js","components/About.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["data","Probability","percentage","athletics","this","props","ethnicity","connections","citizenship","decile","calculateDecile","style","color","getColor","className","mathSAT","verbalSAT","GPA","subjectSAT","ai","calculateAcademicIndex","calculatePercentage","React","Component","Input","state","handleChange","bind","check","localStorage","setItem","JSON","stringify","length","parse","setState","clear","event","preventDefault","target","name","value","parseFloat","toFixed","checked","type","min","max","step","onChange","maxLength","size","About","href","rel","Footer","onClick","about","App","toggle","inverse","Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7613f22.chunk.js","sourcesContent":["\nvar data = [\n    [0,6.32,0.03,3.19,0,0,0,6.29,0.01,5.27],\n    [0.39,12.2,1.03,6.61,0.32,11.54,0.2,7.16,0.53,10.47],\n    [0.56,16.67,5.19,25.36,1.95,8.15,0.64,11.53,1.65,15.56],\n    [1.82,22.62,12.76,39.94,5.5,30.2,0.86,23.9,3.29,23.72],\n    [2.57,26.18,22.41,48.92,9.13,42.45,1.86,21.28,4.4,28.39],\n    [4.2,31.85,29.72,54.73,13.65,41.46,2.49,29.78,5.64,33.7],\n    [4.79,36.04,41.12,82.43,17.28,48.49,3.98,40.45,6.61,38.51],\n    [7.53,47.49,44.48,75.01,22.93,49.85,5.12,53.17,8.22,47.66],\n    [10.77,56.94,54.59,99.9,26.16,43.98,7.55,56.45,10.4,56.67],\n    [15.27,57.07,56.06,83.43,31.32,95.1,12.69,63.02,14.58,60.64]\n];\n\nexport default data;\n","import React from 'react';\nimport data from '../assets/Data';\n\nclass Probability extends React.Component {\n\n    //returns a style variable based on the percentage\n    //red: below 2.5%\n    //yellow: between 2.5 and 4% (4% was Harvard's admit rate in 2019)\n    //green: anything above that\n    getColor(percentage) { \n        let color;\n\n        if(percentage < 2.5){\n            color = 'red';\n        }else if(percentage >= 2.5 && percentage < 4){\n            color = '#ff9900';\n        }else{\n            color = 'green';\n        }\n\n        return color;\n    }\n\n    //All functions below are based on pseudocode from Dr. Tyler Ransom.\n\n    calculatePercentage() {\n        let percentage = -1; //if -1 shows up on the site, then something needs to be fixed\n        \n        //Redundant variable name changes, but it makes the code more readable\n        let athletics = this.props.athletics;\n        let ethnicity = this.props.ethnicity;\n        let connections = this.props.connections;\n        let citizenship = this.props.citizenship;\n\n        if(!citizenship){\n            return <p>Your admissions chances are unknown!</p>;\n        }\n\n        let decile = this.calculateDecile();\n\n        if(connections){\n            if(ethnicity==='white'){\n                percentage = data[decile][1];\n            }else if(ethnicity==='african-american'){\n                percentage = data[decile][3];\n            }else if(ethnicity==='hispanic'){\n                percentage = data[decile][5];\n            }else if(ethnicity==='asian-american'){\n                percentage = data[decile][7];\n            }else{\n                percentage = data[decile][9];\n            }\n        }else{\n            if(ethnicity==='white'){\n                percentage = data[decile][0];\n            }else if(ethnicity==='african-american'){\n                percentage = data[decile][2];\n            }else if(ethnicity==='hispanic'){\n                percentage = data[decile][4];\n            }else if(ethnicity==='asian-american'){\n                percentage = data[decile][6];\n            }else{\n                percentage = data[decile][8];\n            }\n        }\n\n        if(athletics){ //athletics should override all other conditions, so this if-else cascade should be last.\n            if(decile < 1){\n                percentage = 50;\n            }else if(decile >= 1 && decile <= 3){\n                percentage = 79.52;\n            }else if(decile >= 4 && decile <= 6){\n                percentage = 87.21;\n            }else if(decile >= 7 && decile <= 9){\n                percentage = 94.04;\n            }\n        }\n\n        return <p><span style={{\n            color: this.getColor(percentage)\n        }}className='bigger'>{percentage}%</span> of students with your attributes were admitted to Harvard.</p>\n    }\n\n    calculateAcademicIndex() { //the + sign is a unary operator to convert the props from strings to numbers\n        return ((+this.props.mathSAT + +this.props.verbalSAT)/20 + +this.props.GPA*20 + +this.props.subjectSAT/10);\n    }\n\n    calculateDecile() {\n        let ai = +this.calculateAcademicIndex();\n        let decile;\n        //this function assumes that 40 <= ai <= 240\n        if(40<= ai && ai <=193.5){\n            decile = 1;\n        }else if(193.5 < ai && ai <= 205.5){\n            decile = 2;\n        }else if(205.5 < ai && ai <= 213){\n            decile = 3;\n        }else if(213 < ai && ai <= 218.5){\n            decile = 4;\n        }else if(218.5 < ai && ai <= 223){\n            decile = 5;\n        }else if(223 < ai && ai<= 226.5){\n            decile = 6;\n        }else if(226.5 < ai && ai <= 229.5){\n            decile = 7;\n        }else if(229.5 < ai && ai <= 232.5){\n            decile = 8;\n        }else if(232.5 < ai && ai<= 235.8){\n            decile = 9;\n        }else if(235.8 < ai && ai <= 240){\n            decile = 10;\n        }\n\n        decile--;\n\n        return decile;\n    }\n    \n    render(){\n        return(\n            <div className='probability'>\n                <h4>{this.calculatePercentage()}</h4>\n                <p><b>Stats for nerds:</b></p>\n                <p>Academic Index: {(+this.props.mathSAT + +this.props.verbalSAT)/20 + +this.props.GPA*20 + +this.props.subjectSAT/10}</p>\n                <p>Academic Index Decile: {+this.calculateDecile() + 1}</p>\n            </div>\n        );\n    }\n\n}\n\nexport default Probability;","import React from 'react';\nimport Probability from './Probability';\nimport '../App.css'\n\nclass Input extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            mathSAT: 500,\n            verbalSAT: 500,\n            GPA: 2.0,\n            subjectSAT: 500,\n            citizenship: true,\n            ethnicity: 'white',\n            athletics: false,\n            connections: false\n        };\n\n       this.handleChange = this.handleChange.bind(this);\n       this.check = this.check.bind(this);\n    }\n\n    componentWillUnmount(){ //store state in local storage when you go to about\n        const data = this.state;\n        localStorage.setItem('data', JSON.stringify(data));\n    }\n\n    componentDidMount(){ //check for local storage and set state to that\n        if(localStorage.length !== 0){\n            const data = JSON.parse(localStorage.data);\n\n            //destructure data\n            const { mathSAT, verbalSAT, GPA, subjectSAT, citizenship, ethnicity, athletics, connections } = data;\n\n            this.setState({ //I think there is a better way to do this but I have not figured it out yet\n                mathSAT: mathSAT,\n                verbalSAT: verbalSAT,\n                GPA: GPA,\n                subjectSAT: subjectSAT,\n                citizenship: citizenship,\n                ethnicity: ethnicity,\n                athletics: athletics,\n                connections: connections\n            });\n        }\n\n        localStorage.clear();\n    }\n\n    handleChange(event){\n        event.preventDefault();\n       \n        //prevent the user from putting invalid GPAs in the refine box\n        if(event.target.name==='GPA'){\n            if(event.target.value > 4 || event.target.value < 0){\n                //do nothing, this input is invalid\n            }else{\n                let GPA = +event.target.value;\n                \n                if((GPA * 100) % 1 !== 0){ //if we have more than 2 decimal places...\n                    GPA = parseFloat(event.target.value).toFixed(2); //...restrict GPA to 2 decimal places\n                }\n\n                this.setState({\n                    [event.target.name]: GPA\n                });\n            }\n        }else{\n            this.setState({\n                [event.target.name]: event.target.value\n            });\n        }\n    }\n\n    check(event){\n        let checked = event.target.checked;\n        if(checked){\n            this.setState({\n                [event.target.name]: true\n            })\n        }else{\n            this.setState({\n                [event.target.name]: false\n            })\n        }\n    }\n\n    render(){\n        return(\n            <div className='content'>\n\n            <div className='row'>\n                <div className='column left'>\n                    <p><label>What was your highest score on the math section of the SAT?</label></p>\n                </div>\n                <div className='column right'>\n                    <input \n                        type='range' \n                        min={200} \n                        max={800} \n                        value={this.state.mathSAT} \n                        step={10} name='mathSAT' \n                        onChange={this.handleChange}/>\n                    <span>{this.state.mathSAT}</span>\n                </div>\n            </div>\n\n            <div className='row'>\n                <div className='column left'>\n                    <p><label>What was your highest score on the verbal section of the SAT?</label></p>\n                </div>\n                <div className='column right'>\n                    <input \n                    type='range' \n                        min={200} \n                        max={800} \n                        value={this.state.verbalSAT} \n                        step={10} name='verbalSAT' \n                        onChange={this.handleChange}/>\n                    <span>{this.state.verbalSAT}</span>\n                </div>\n            </div>\n            \n            <div className='row'>\n                <div className='column left'>\n                    <p><label>What is your average score across all of the SAT II subject tests that you've taken?</label></p>\n                </div>\n                <div className='column right'>\n                    <input \n                            type='range' \n                            min={200} \n                            max={800} \n                            value={this.state.subjectSAT} \n                            step={10} name='subjectSAT' \n                            onChange={this.handleChange}/>\n                    <span>{this.state.subjectSAT}</span>\n                </div>\n            </div>\n\n            <div className='row'>\n                <div className='column left'>\n                    <p><label>What was your high school GPA (normalized to a 4-point scale)?</label></p>\n                </div>\n                <div className='column right'>\n                    <input \n                        type='range' \n                        min={0.0} \n                        max={4.0} \n                        value={this.state.GPA} \n                        step={0.01} \n                        name='GPA' \n                        onChange={this.handleChange}\n                        />\n                    {/* <span> | Refine: </span> */}\n                    <input\n                        type='number'\n                        min={0}\n                        max={4}\n                        step={0.01}\n                        value={this.state.GPA}\n                        maxLength={3}\n                        name='GPA'\n                        size={4}\n                        onChange={this.handleChange} />\n                </div>\n            </div>\n\n            <div className='row'>\n                <div className='column left'>\n                    <p><label>Are you a US citizen or permanent resident?</label></p>\n                </div>\n                <div className='column right'>\n                    Yes<input \n                        type='checkbox' \n                        checked={this.state.citizenship} \n                        name='citizenship' \n                        onChange={this.check}/>\n                </div>\n            </div>\n            <div className='row'>\n                <div className='column left'>\n                    <p><label>What is your race/ethnicity?</label></p>\n                </div>\n                <div className='column right'>\n                <select \n                        name=\"ethnicity\" \n                        checked={this.state.ethnicity} \n                        onChange={this.handleChange}>\n                            <option value='white'>White</option>\n                            <option value='african-american'>African American</option>\n                            <option value='hispanic'>Hispanic</option>\n                            <option value='asian-american'>Asian-American</option>\n                            <option value='other'>Other</option>\n                            <option value='undisclosed'>Prefer not to say</option>\n                    </select>\n                </div>\n            </div>\n\n            <div className='row'>\n                <div className='column left'>\n                    <p><label>Are you being recruited by Harvard for varsity athletics?</label></p>\n                </div>\n                <div className='column right'>\n                    Yes<input \n                        type='checkbox' \n                        name='athletics'\n                        checked={this.state.athletics}\n                        onChange={this.check}/> \n                </div>\n            </div>\n\n            <div className='row'>\n                <div className='column left'>\n                    <p><label>Do any of the following cases apply to you?</label></p>\n                    <ul>\n                        <li>You have relatives who are Harvard alumni.</li>\n                        <li>You have relatives who are Harvard employees.</li>\n                        <li>You have relatives who made large donations to Harvard in the past.</li>\n                    </ul>\n                </div>\n                <div className='column right'>\n                    Yes<input \n                        type='checkbox' \n                        name='connections'\n                        checked={this.state.connections}\n                        onChange={this.check}/>\n                </div>\n            </div>\n                        \n                <div>\n                    <Probability \n                        mathSAT={this.state.mathSAT}\n                        verbalSAT={this.state.verbalSAT}\n                        GPA={this.state.GPA}\n                        subjectSAT={this.state.subjectSAT}\n                        citizenship={this.state.citizenship}\n                        ethnicity={this.state.ethnicity}\n                        athletics={this.state.athletics}\n                        connections={this.state.connections}/>\n                </div>\n        </div>\n        );   \n    }\n}\n\nexport default Input;\n","import React from 'react';\n\nconst About = () => {\n    return(\n        <div className='about'>\n            <p>The purpose of this website is to inform interested parties about their likelihood of admission to Harvard University based on academic credentials, race/ethnicity, and special connections.</p>\n            <p>The admissions statistics are based on Harvard admissions data from the Classes of 2014-2019 made public through the SFFA v. Harvard (2018) lawsuit. See below for specific references.</p>\n            <p>Harvard employs a holistic admissions process, which means that there are many other factors than academics that determine your admissions chances.</p>\n            <p>Holistic admissions are inherently random, so even the most academically qualified applicants may not have a large admissions probability.</p>\n            <p>The designers of this website hope that you will use this information when deciding which colleges to apply to. Our primary motivation is providing information to the public.</p>\n            <p>The underlying research behind this site was done by Drs. Tyler Ransom, Josh Kinsler, and Peter Arcidiacono. Web development was done by Will Koury.</p>\n            <span><center><a href='https://tyleransom.github.io/research/legacyathlete.pdf' rel='noopener noreferrer' target='_blank'>Research</a> | <a href='https://github.com/wkoury/harvard-admissions' rel='noopener noreferrer' target='_blank'>GitHub</a> | <a href='https://wkoury.com/harvard' rel='noopener noreferrer' target='_blank'>Further Reading</a></center></span>\n        </div>\n    );\n};\n\nexport default About;\n","import React from 'react';\n\nconst Footer = (props) => {\n    return(\n        <div className='footer'>\n            <a href='#top' onClick={props.onClick}>\n                {props.about ? 'Back' : 'About'}\n            </a>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport Form from './components/Form';\nimport About from './components/About';\nimport Footer from './components/Footer';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = { about: false };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle(event){\n    let inverse = !(this.state.about);\n    this.setState({ about: inverse });\n  }\n\n  render(){\n    return (\n      <div className='parent'>\n        <div className='app'>\n          <h3 className='title'>What is your probability of being admitted to Harvard?</h3>\n          {this.state.about ? <About /> : <Form />}\n        </div>        \n        <Footer about={this.state.about} onClick={this.toggle}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}